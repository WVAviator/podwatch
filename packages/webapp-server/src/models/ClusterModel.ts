import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import { UserDocument } from './UserModel';

/**
 * The attributes required to create a new cluster
 */
export interface ClusterAttrs {
  /**
   * The cluster's name, specified by the cluster owner.
   */
  name: string;
  /**
   * The cluster's description, specified by the cluster owner.
   */
  description: string;
  /**
   * The cluster's secret - this should be a randomly generated string. It will then be hashed and stored in the database.
   */
  secret: string;
  /**
   * The cluster's owner - this should be a reference to a user document.
   */
  owner: UserDocument;
  /**
   * The cluster's members - this should be an array of references to user documents. These users will be permitted read access to this cluster's dashboard.
   */
  members: UserDocument[];
}

/**
 * The cluster document interface - this is the interface that will be used to access cluster documents in the database.
 */
export interface ClusterDocument extends ClusterAttrs, mongoose.Document {
  /**
   * The cluster's mongodb ID - this is automatically generated by mongodb and ported from _id through a built-in virtual getter.
   */
  id: string;
  /**
   * This function compares a candidate secret with the hashed secret in the database.
   * @param candidateSecret The candidate secret to compare with the hashed secret in the database.
   * @returns True if the candidate secret matches the hashed secret in the database, false otherwise.
   */
  compareSecret: (candidateSecret: string) => Promise<boolean>;
  /**
   * Generates a random secret and returns it. This function does not save the secret to the database.
   * @returns A random string of 24 characters.
   */
  generateSecret: () => Promise<string>;
}

/**
 * The cluster model interface - this is the interface that will be used to access the cluster model in the database.
 */
export interface ClusterModel extends mongoose.Model<ClusterDocument> {
  build: (attrs: ClusterAttrs) => ClusterDocument;
}

const clusterSchema = new mongoose.Schema<ClusterAttrs>(
  {
    name: {
      type: String,
      required: true,
    },
    secret: {
      type: String,
      required: true,
      select: false,
    },
    description: {
      type: String,
    },
    owner: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    members: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
    ],
  },
  {
    toJSON: {
      virtuals: true,
    },
    toObject: {
      virtuals: true,
    },
  }
);

clusterSchema.pre('save', async function (done) {
  if (!this.isModified('secret')) return done();
  try {
    const salt = await bcrypt.genSalt(10);
    this.secret = await bcrypt.hash(this.secret, salt);
    return done();
  } catch (err: any) {
    return done(err);
  }
});

clusterSchema.methods.compareSecret = async function (candidateSecret: string) {
  return await bcrypt.compare(candidateSecret, this.secret);
};

clusterSchema.methods.generateSecret = async function () {
  return new Promise<string>((resolve) => {
    const charSet =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let secret = '';
    for (let i = 0; i < 24; i++) {
      secret += charSet[Math.floor(Math.random() * charSet.length)];
    }
    resolve(secret);
  });
};

clusterSchema.virtual('secret').set(function (this: ClusterDocument, secret) {
  this.secret = secret;
});

clusterSchema.statics.build = (attrs: ClusterAttrs) => {
  return new ClusterModel(attrs);
};

const ClusterModel = mongoose.model<ClusterDocument, ClusterModel>(
  'Cluster',
  clusterSchema
);

export { ClusterModel };
